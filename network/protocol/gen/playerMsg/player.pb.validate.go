// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/player.proto

package playerMsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on C2S_CreatePlayer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *C2S_CreatePlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2S_CreatePlayer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// C2S_CreatePlayerMultiError, or nil if none found.
func (m *C2S_CreatePlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *C2S_CreatePlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	if len(errors) > 0 {
		return C2S_CreatePlayerMultiError(errors)
	}

	return nil
}

// C2S_CreatePlayerMultiError is an error wrapping multiple validation errors
// returned by C2S_CreatePlayer.ValidateAll() if the designated constraints
// aren't met.
type C2S_CreatePlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2S_CreatePlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2S_CreatePlayerMultiError) AllErrors() []error { return m }

// C2S_CreatePlayerValidationError is the validation error returned by
// C2S_CreatePlayer.Validate if the designated constraints aren't met.
type C2S_CreatePlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2S_CreatePlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2S_CreatePlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2S_CreatePlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2S_CreatePlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2S_CreatePlayerValidationError) ErrorName() string { return "C2S_CreatePlayerValidationError" }

// Error satisfies the builtin error interface
func (e C2S_CreatePlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2S_CreatePlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2S_CreatePlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2S_CreatePlayerValidationError{}

// Validate checks the field values on S2C_CreatePlayer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *S2C_CreatePlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S2C_CreatePlayer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S2C_CreatePlayerMultiError, or nil if none found.
func (m *S2C_CreatePlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *S2C_CreatePlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return S2C_CreatePlayerMultiError(errors)
	}

	return nil
}

// S2C_CreatePlayerMultiError is an error wrapping multiple validation errors
// returned by S2C_CreatePlayer.ValidateAll() if the designated constraints
// aren't met.
type S2C_CreatePlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S2C_CreatePlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S2C_CreatePlayerMultiError) AllErrors() []error { return m }

// S2C_CreatePlayerValidationError is the validation error returned by
// S2C_CreatePlayer.Validate if the designated constraints aren't met.
type S2C_CreatePlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S2C_CreatePlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S2C_CreatePlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S2C_CreatePlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S2C_CreatePlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S2C_CreatePlayerValidationError) ErrorName() string { return "S2C_CreatePlayerValidationError" }

// Error satisfies the builtin error interface
func (e S2C_CreatePlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS2C_CreatePlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S2C_CreatePlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S2C_CreatePlayerValidationError{}

// Validate checks the field values on C2S_Login with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *C2S_Login) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2S_Login with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in C2S_LoginMultiError, or nil
// if none found.
func (m *C2S_Login) ValidateAll() error {
	return m.validate(true)
}

func (m *C2S_Login) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	if len(errors) > 0 {
		return C2S_LoginMultiError(errors)
	}

	return nil
}

// C2S_LoginMultiError is an error wrapping multiple validation errors returned
// by C2S_Login.ValidateAll() if the designated constraints aren't met.
type C2S_LoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2S_LoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2S_LoginMultiError) AllErrors() []error { return m }

// C2S_LoginValidationError is the validation error returned by
// C2S_Login.Validate if the designated constraints aren't met.
type C2S_LoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2S_LoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2S_LoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2S_LoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2S_LoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2S_LoginValidationError) ErrorName() string { return "C2S_LoginValidationError" }

// Error satisfies the builtin error interface
func (e C2S_LoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2S_Login.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2S_LoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2S_LoginValidationError{}

// Validate checks the field values on S2C_Login with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *S2C_Login) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S2C_Login with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in S2C_LoginMultiError, or nil
// if none found.
func (m *S2C_Login) ValidateAll() error {
	return m.validate(true)
}

func (m *S2C_Login) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return S2C_LoginMultiError(errors)
	}

	return nil
}

// S2C_LoginMultiError is an error wrapping multiple validation errors returned
// by S2C_Login.ValidateAll() if the designated constraints aren't met.
type S2C_LoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S2C_LoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S2C_LoginMultiError) AllErrors() []error { return m }

// S2C_LoginValidationError is the validation error returned by
// S2C_Login.Validate if the designated constraints aren't met.
type S2C_LoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S2C_LoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S2C_LoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S2C_LoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S2C_LoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S2C_LoginValidationError) ErrorName() string { return "S2C_LoginValidationError" }

// Error satisfies the builtin error interface
func (e S2C_LoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS2C_Login.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S2C_LoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S2C_LoginValidationError{}

// Validate checks the field values on C2GS_EnterSence with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *C2GS_EnterSence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_EnterSence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// C2GS_EnterSenceMultiError, or nil if none found.
func (m *C2GS_EnterSence) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_EnterSence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if all {
		switch v := interface{}(m.GetPos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C2GS_EnterSenceValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C2GS_EnterSenceValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C2GS_EnterSenceValidationError{
				field:  "Pos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Dir

	if len(errors) > 0 {
		return C2GS_EnterSenceMultiError(errors)
	}

	return nil
}

// C2GS_EnterSenceMultiError is an error wrapping multiple validation errors
// returned by C2GS_EnterSence.ValidateAll() if the designated constraints
// aren't met.
type C2GS_EnterSenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_EnterSenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_EnterSenceMultiError) AllErrors() []error { return m }

// C2GS_EnterSenceValidationError is the validation error returned by
// C2GS_EnterSence.Validate if the designated constraints aren't met.
type C2GS_EnterSenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_EnterSenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_EnterSenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_EnterSenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_EnterSenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_EnterSenceValidationError) ErrorName() string { return "C2GS_EnterSenceValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_EnterSenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_EnterSence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_EnterSenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_EnterSenceValidationError{}

// Validate checks the field values on GS2C_EnterSence with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GS2C_EnterSence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_EnterSence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GS2C_EnterSenceMultiError, or nil if none found.
func (m *GS2C_EnterSence) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_EnterSence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if all {
		switch v := interface{}(m.GetPos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GS2C_EnterSenceValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GS2C_EnterSenceValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GS2C_EnterSenceValidationError{
				field:  "Pos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Dir

	if len(errors) > 0 {
		return GS2C_EnterSenceMultiError(errors)
	}

	return nil
}

// GS2C_EnterSenceMultiError is an error wrapping multiple validation errors
// returned by GS2C_EnterSence.ValidateAll() if the designated constraints
// aren't met.
type GS2C_EnterSenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_EnterSenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_EnterSenceMultiError) AllErrors() []error { return m }

// GS2C_EnterSenceValidationError is the validation error returned by
// GS2C_EnterSence.Validate if the designated constraints aren't met.
type GS2C_EnterSenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_EnterSenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_EnterSenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_EnterSenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_EnterSenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_EnterSenceValidationError) ErrorName() string { return "GS2C_EnterSenceValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_EnterSenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_EnterSence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_EnterSenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_EnterSenceValidationError{}

// Validate checks the field values on PosInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PosInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PosInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PosInfoMultiError, or nil if none found.
func (m *PosInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PosInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return PosInfoMultiError(errors)
	}

	return nil
}

// PosInfoMultiError is an error wrapping multiple validation errors returned
// by PosInfo.ValidateAll() if the designated constraints aren't met.
type PosInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PosInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PosInfoMultiError) AllErrors() []error { return m }

// PosInfoValidationError is the validation error returned by PosInfo.Validate
// if the designated constraints aren't met.
type PosInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PosInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PosInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PosInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PosInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PosInfoValidationError) ErrorName() string { return "PosInfoValidationError" }

// Error satisfies the builtin error interface
func (e PosInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PosInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PosInfoValidationError{}

// Validate checks the field values on C2GS_PlayerMove with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *C2GS_PlayerMove) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_PlayerMove with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// C2GS_PlayerMoveMultiError, or nil if none found.
func (m *C2GS_PlayerMove) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_PlayerMove) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if all {
		switch v := interface{}(m.GetPos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C2GS_PlayerMoveValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C2GS_PlayerMoveValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C2GS_PlayerMoveValidationError{
				field:  "Pos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return C2GS_PlayerMoveMultiError(errors)
	}

	return nil
}

// C2GS_PlayerMoveMultiError is an error wrapping multiple validation errors
// returned by C2GS_PlayerMove.ValidateAll() if the designated constraints
// aren't met.
type C2GS_PlayerMoveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_PlayerMoveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_PlayerMoveMultiError) AllErrors() []error { return m }

// C2GS_PlayerMoveValidationError is the validation error returned by
// C2GS_PlayerMove.Validate if the designated constraints aren't met.
type C2GS_PlayerMoveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_PlayerMoveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_PlayerMoveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_PlayerMoveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_PlayerMoveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_PlayerMoveValidationError) ErrorName() string { return "C2GS_PlayerMoveValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_PlayerMoveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_PlayerMove.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_PlayerMoveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_PlayerMoveValidationError{}

// Validate checks the field values on GS2C_PlayerMove with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GS2C_PlayerMove) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_PlayerMove with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GS2C_PlayerMoveMultiError, or nil if none found.
func (m *GS2C_PlayerMove) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_PlayerMove) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GS2C_PlayerMoveValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GS2C_PlayerMoveValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GS2C_PlayerMoveValidationError{
				field:  "Pos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GS2C_PlayerMoveMultiError(errors)
	}

	return nil
}

// GS2C_PlayerMoveMultiError is an error wrapping multiple validation errors
// returned by GS2C_PlayerMove.ValidateAll() if the designated constraints
// aren't met.
type GS2C_PlayerMoveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_PlayerMoveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_PlayerMoveMultiError) AllErrors() []error { return m }

// GS2C_PlayerMoveValidationError is the validation error returned by
// GS2C_PlayerMove.Validate if the designated constraints aren't met.
type GS2C_PlayerMoveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_PlayerMoveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_PlayerMoveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_PlayerMoveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_PlayerMoveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_PlayerMoveValidationError) ErrorName() string { return "GS2C_PlayerMoveValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_PlayerMoveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_PlayerMove.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_PlayerMoveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_PlayerMoveValidationError{}

// Validate checks the field values on C2GS_PlayerLeave with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *C2GS_PlayerLeave) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_PlayerLeave with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// C2GS_PlayerLeaveMultiError, or nil if none found.
func (m *C2GS_PlayerLeave) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_PlayerLeave) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if len(errors) > 0 {
		return C2GS_PlayerLeaveMultiError(errors)
	}

	return nil
}

// C2GS_PlayerLeaveMultiError is an error wrapping multiple validation errors
// returned by C2GS_PlayerLeave.ValidateAll() if the designated constraints
// aren't met.
type C2GS_PlayerLeaveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_PlayerLeaveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_PlayerLeaveMultiError) AllErrors() []error { return m }

// C2GS_PlayerLeaveValidationError is the validation error returned by
// C2GS_PlayerLeave.Validate if the designated constraints aren't met.
type C2GS_PlayerLeaveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_PlayerLeaveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_PlayerLeaveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_PlayerLeaveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_PlayerLeaveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_PlayerLeaveValidationError) ErrorName() string { return "C2GS_PlayerLeaveValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_PlayerLeaveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_PlayerLeave.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_PlayerLeaveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_PlayerLeaveValidationError{}

// Validate checks the field values on GS2C_PlayerLeave with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GS2C_PlayerLeave) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_PlayerLeave with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GS2C_PlayerLeaveMultiError, or nil if none found.
func (m *GS2C_PlayerLeave) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_PlayerLeave) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if len(errors) > 0 {
		return GS2C_PlayerLeaveMultiError(errors)
	}

	return nil
}

// GS2C_PlayerLeaveMultiError is an error wrapping multiple validation errors
// returned by GS2C_PlayerLeave.ValidateAll() if the designated constraints
// aren't met.
type GS2C_PlayerLeaveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_PlayerLeaveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_PlayerLeaveMultiError) AllErrors() []error { return m }

// GS2C_PlayerLeaveValidationError is the validation error returned by
// GS2C_PlayerLeave.Validate if the designated constraints aren't met.
type GS2C_PlayerLeaveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_PlayerLeaveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_PlayerLeaveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_PlayerLeaveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_PlayerLeaveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_PlayerLeaveValidationError) ErrorName() string { return "GS2C_PlayerLeaveValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_PlayerLeaveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_PlayerLeave.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_PlayerLeaveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_PlayerLeaveValidationError{}

// Validate checks the field values on C2GS_AddFriend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *C2GS_AddFriend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_AddFriend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in C2GS_AddFriendMultiError,
// or nil if none found.
func (m *C2GS_AddFriend) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_AddFriend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if len(errors) > 0 {
		return C2GS_AddFriendMultiError(errors)
	}

	return nil
}

// C2GS_AddFriendMultiError is an error wrapping multiple validation errors
// returned by C2GS_AddFriend.ValidateAll() if the designated constraints
// aren't met.
type C2GS_AddFriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_AddFriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_AddFriendMultiError) AllErrors() []error { return m }

// C2GS_AddFriendValidationError is the validation error returned by
// C2GS_AddFriend.Validate if the designated constraints aren't met.
type C2GS_AddFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_AddFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_AddFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_AddFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_AddFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_AddFriendValidationError) ErrorName() string { return "C2GS_AddFriendValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_AddFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_AddFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_AddFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_AddFriendValidationError{}

// Validate checks the field values on GS2C_AddFriend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GS2C_AddFriend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_AddFriend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GS2C_AddFriendMultiError,
// or nil if none found.
func (m *GS2C_AddFriend) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_AddFriend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Desc

	if len(errors) > 0 {
		return GS2C_AddFriendMultiError(errors)
	}

	return nil
}

// GS2C_AddFriendMultiError is an error wrapping multiple validation errors
// returned by GS2C_AddFriend.ValidateAll() if the designated constraints
// aren't met.
type GS2C_AddFriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_AddFriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_AddFriendMultiError) AllErrors() []error { return m }

// GS2C_AddFriendValidationError is the validation error returned by
// GS2C_AddFriend.Validate if the designated constraints aren't met.
type GS2C_AddFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_AddFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_AddFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_AddFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_AddFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_AddFriendValidationError) ErrorName() string { return "GS2C_AddFriendValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_AddFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_AddFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_AddFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_AddFriendValidationError{}

// Validate checks the field values on C2GS_DelFriend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *C2GS_DelFriend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_DelFriend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in C2GS_DelFriendMultiError,
// or nil if none found.
func (m *C2GS_DelFriend) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_DelFriend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if len(errors) > 0 {
		return C2GS_DelFriendMultiError(errors)
	}

	return nil
}

// C2GS_DelFriendMultiError is an error wrapping multiple validation errors
// returned by C2GS_DelFriend.ValidateAll() if the designated constraints
// aren't met.
type C2GS_DelFriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_DelFriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_DelFriendMultiError) AllErrors() []error { return m }

// C2GS_DelFriendValidationError is the validation error returned by
// C2GS_DelFriend.Validate if the designated constraints aren't met.
type C2GS_DelFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_DelFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_DelFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_DelFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_DelFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_DelFriendValidationError) ErrorName() string { return "C2GS_DelFriendValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_DelFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_DelFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_DelFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_DelFriendValidationError{}

// Validate checks the field values on GS2C_DelFriend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GS2C_DelFriend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_DelFriend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GS2C_DelFriendMultiError,
// or nil if none found.
func (m *GS2C_DelFriend) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_DelFriend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Desc

	if len(errors) > 0 {
		return GS2C_DelFriendMultiError(errors)
	}

	return nil
}

// GS2C_DelFriendMultiError is an error wrapping multiple validation errors
// returned by GS2C_DelFriend.ValidateAll() if the designated constraints
// aren't met.
type GS2C_DelFriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_DelFriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_DelFriendMultiError) AllErrors() []error { return m }

// GS2C_DelFriendValidationError is the validation error returned by
// GS2C_DelFriend.Validate if the designated constraints aren't met.
type GS2C_DelFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_DelFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_DelFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_DelFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_DelFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_DelFriendValidationError) ErrorName() string { return "GS2C_DelFriendValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_DelFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_DelFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_DelFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_DelFriendValidationError{}

// Validate checks the field values on C2GS_SendChatMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *C2GS_SendChatMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C2GS_SendChatMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// C2GS_SendChatMsgMultiError, or nil if none found.
func (m *C2GS_SendChatMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *C2GS_SendChatMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C2GS_SendChatMsgValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C2GS_SendChatMsgValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C2GS_SendChatMsgValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Category

	if len(errors) > 0 {
		return C2GS_SendChatMsgMultiError(errors)
	}

	return nil
}

// C2GS_SendChatMsgMultiError is an error wrapping multiple validation errors
// returned by C2GS_SendChatMsg.ValidateAll() if the designated constraints
// aren't met.
type C2GS_SendChatMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C2GS_SendChatMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C2GS_SendChatMsgMultiError) AllErrors() []error { return m }

// C2GS_SendChatMsgValidationError is the validation error returned by
// C2GS_SendChatMsg.Validate if the designated constraints aren't met.
type C2GS_SendChatMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C2GS_SendChatMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C2GS_SendChatMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C2GS_SendChatMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C2GS_SendChatMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C2GS_SendChatMsgValidationError) ErrorName() string { return "C2GS_SendChatMsgValidationError" }

// Error satisfies the builtin error interface
func (e C2GS_SendChatMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC2GS_SendChatMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C2GS_SendChatMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C2GS_SendChatMsgValidationError{}

// Validate checks the field values on GS2C_SendChatMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GS2C_SendChatMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GS2C_SendChatMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GS2C_SendChatMsgMultiError, or nil if none found.
func (m *GS2C_SendChatMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *GS2C_SendChatMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UId

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GS2C_SendChatMsgValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GS2C_SendChatMsgValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GS2C_SendChatMsgValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GS2C_SendChatMsgMultiError(errors)
	}

	return nil
}

// GS2C_SendChatMsgMultiError is an error wrapping multiple validation errors
// returned by GS2C_SendChatMsg.ValidateAll() if the designated constraints
// aren't met.
type GS2C_SendChatMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GS2C_SendChatMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GS2C_SendChatMsgMultiError) AllErrors() []error { return m }

// GS2C_SendChatMsgValidationError is the validation error returned by
// GS2C_SendChatMsg.Validate if the designated constraints aren't met.
type GS2C_SendChatMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GS2C_SendChatMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GS2C_SendChatMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GS2C_SendChatMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GS2C_SendChatMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GS2C_SendChatMsgValidationError) ErrorName() string { return "GS2C_SendChatMsgValidationError" }

// Error satisfies the builtin error interface
func (e GS2C_SendChatMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGS2C_SendChatMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GS2C_SendChatMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GS2C_SendChatMsgValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}
